<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Geometry | Alexandre Amice</title><link>https://alexandreamice.github.io/tag/geometry/</link><atom:link href="https://alexandreamice.github.io/tag/geometry/index.xml" rel="self" type="application/rss+xml"/><description>Geometry</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sun, 12 Feb 2023 00:00:00 +0000</lastBuildDate><image><url>https://alexandreamice.github.io/media/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_3.png</url><title>Geometry</title><link>https://alexandreamice.github.io/tag/geometry/</link></image><item><title>Certified Polyhedral Descriptions of Configuration Space</title><link>https://alexandreamice.github.io/project/c-iris/</link><pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate><guid>https://alexandreamice.github.io/project/c-iris/</guid><description>&lt;p>Understanding the geometry of collision-free configuration space (C-free) in the presence of task-space obstacles is an essential ingredient for collision-free motion planning. While it is possible to check for collisions at a point using standard algorithms, to date no practical method exists for computing C-free &lt;em>regions&lt;/em> with rigorous certificates due to the complexity of mapping task-space obstacles through the kinematics. In this work, we present the first to our knowledge rigorous method for approximately decomposing a rational parametrization of C-free into certified polyhedral regions. Our method, called C-IRIS (C-space Iterative Regional Inflation by Semidefinite programming), generates large, convex polytopes in a rational parameterization of the configuration space which are rigorously certified to be collision-free. Such regions have been shown to be useful for both optimization-based and randomized motion planning. Based on convex optimization, our method works in arbitrary dimensions, only makes assumptions about the convexity of the obstacles in the &lt;em>task&lt;/em> space, and is fast enough to scale to realistic problems in manipulation. We demonstrate our algorithm&amp;rsquo;s ability to fill a non-trivial amount of collision-free C-space in several 2-DOF examples where the C-space can be visualized, as well as the scalability of our algorithm on a 7-DOF KUKA iiwa, a 6-DOF UR3e and 12-DOF bimanual manipulators. An implementation of our algorithm is open-sourced in &lt;a href="https://github.com/RobotLocomotion/drake" target="_blank" rel="noopener">Drake&lt;/a>.&lt;/p>
&lt;iframe
src="pinball_growth.html"
width="100%"
height="500"
frameborder="1"
allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
allowfullscreen>
name="pinball_trajectory"
&lt;/iframe>
&lt;p>&lt;center>&lt;a href="pinball_growth.html" target="pinball_growth">View this animation in full screen&lt;/a>&lt;/center>&lt;/p>
&lt;iframe
width="100%"
height="500"
src="pinball_trajectory.html"
frameborder="1"
allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
allowfullscreen>
name="pinball_trajectory"
&lt;/iframe>
&lt;p>&lt;center>&lt;a href="pinball_trajectory.html" target="pinball_trajectory">View this animation in full screen&lt;/a>&lt;/center>&lt;/p></description></item></channel></rss>